0. Introduction 
"Socket address" is consist of IP address and Port number. 
소켓은 4계층 상위 계층과 하위 계층간의 정보를 주고 받기 위한 구멍이다. 


1. Understanding of Socket & Socket API
Socket connection run between two diff coms or be used for interprcess comu on a single com.

Berkeley Socket API Functions 

Basic operating function
socket() -> bind(): binding Socket with port&IP address on OS  -> 
listen(): used on server side, listening a connection request from client *only for TCP -> connect(): used ont he client side, assigning a free local port number to a socket, attempting to establish a new TCP conn. ->
accept() : used on serve side, accepting a received incoming attepmt, creating a new socket associated with the socket address pair (cli) of this conn. 

send,recv,sendto,close()

setsockopt() : set a particualr socket option

socketserver module :
It simplifies the task of writing network servers.

BaseServer(server_address, RequestHandlerClass)
This is superclass of all Server objects in the module. 

BaseRequestHandler
This is superclass of all request handler  objects in the module.
A concrete handler subclass  must define new handle() method.

 
1. create request handler class by subclassing the BaseRequestHandler class and overriding its handle() method 
2. create server classes, oassing the server's address and port, handler class
3. classs the handle_reqest() or serve_forveerer() method of BaseServer class.

2. 1:N 통신Day02 

여기까지는 1:1 통신만 가능하다. 
멀티쓰레딩 기법을 통해서나 Socket API 의 고유 기능을 통해 1:N 통신을 구현해야한다. 

Each request must be completed before the next request can be started 
The solution is to create a separate proces or thread to handle each request; the 
"ForkingMixIn" and "ThreadingMixIn" mix-in classes can be used to support asynchronous behav.

Why Thread? 
동작방식을 바꾸기 위해서이다. 

동작방식이란 뭐냐? 이때까지는 동기식 동작방식을 사용하였다. synchronus
한 동작을 처리중이면 해당 동작처리가 끝날때까지 다음 동작을 처리하는것이 불가능하다. 
동기식에서는 a와 b의 "선후관계"가 너무 명확한것이다. 

앞에서는 클라이언트1이 접속하고 있으면 다른 클라이언트가 접속하지 못하고, 클라1  접속이 끊어져야 클라2 접속이 가능했다. 
따라서 쓰레드를 통해서 동기식 동작방식을 비동기식으로 바꾸어야한다. 통상적으로 blocking 처리라고 한다. 

비동식이란?
 n개의 요청을 동시다발적으로 처리가능하다. 이를 non-blocking 처리라고 한다. 

Multi-Thread/Process
cpu에 의해서 실행되는 독립적인 프로그램을 통상적으로 프로세스라고 한다. 
멀티프로세스는 프로그램이 여러개 실행되는것이다. 

Multi-process 는 독립적인 프로그램을 각각 실행한다.
하지만 처리할 데이터가 많은 경우에는 하나의 데이터가여러  일꾼(쓰레드) 들에게 공유되어서 처리되는 경우가 있다. 이것이 Multi-Thread 기법이다. 

socketserver 를 사용하여 multi-threading server 를 만드는 steps 

Step1. 

class ThreadingTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
   pass

Mix-in class 를 통해 multi-threading 을 수행하는 TCP 서버를 만들 수 있다. 

Step2.
Request Handler 를 수정할 수 있다. 
threading.current_thread() 와 같은 메소드를 호출  가능.
사실 Request Handler 를 수정하지 않아도 된다. 

Step3. 
파이썬이 실행이 되면 이곳에서 핸들러가 실행이 된다. 파이썬 프로그램이 실행이 되는 본체도,
쓰레드화된다. 이를 "Main Thread" 라고 한다. 

if __name__ == "__main__"  아랫줄에 실행되는 코드가 메인 쓰레드화된다는 의미.
즉, 각각의 코드가 독립적인 쓰레드로서 동작한다. 
그리고 다음과 같은 경우가 있다. 
1.  메인 쓰레드가 죽었을때, 추가적인 쓰레드들도 죽었으면 좋겠을때.
2.  반대로, 죽어도 다른 쓰레드들도  살아있으면 좋겠다. 
통신 프로그램의 경우에는 1처럼 추가적인 쓰레드들을 먼저 죽이고, 메인 쓰레드를 죽이는것이 익숙하다. 

이것을 결정하는것이 daemon_threads. Default is false
When Main dies, others live. This is default action 
daemon 이 main이 죽어도 살아있는게 싫다면 이것을 True 로 설정.

threading.Thread(target=server.serve_forever) #create thread 
server_thread.start() #start the thread 
threading.active_count()
server_thread_Run() 

3. Asynchrouns chatting service
N:M communication 

클라이언트측 변경 내용 
Threading 을 사용하여 수신과 송신을 비동기적으로 분리
전송은 사용자로부터 키보드 입력을 받아야하므로 Thread 화 하지 않고,
수신은 서버의 echo 를 기다려야하는 것이므로, Thread 화 한다.


반복구문에 있어야할 Recv 처리를 별도의 함수 로 처리한다. (이경우에는 클래스가 아님)
그리고 클라이언트측의 recvHandler 를main 에서 Thread 화한다. 
clientThread = threading.Thread(target=recvHandler, args=(clientSocket,))

송신은 동기, 수신은 비동기식으로 동작하도록 Threading 화 해준다. 


서버측 변경 내용 
N:M 통신을 위해서 서버는 각 클라이언트의 socket 정보를 저장해아한다. 
연결해제 요청이 오면 저장딘 정보를 제거하는것. 
특정 client 의 메시지를 전체 client에 전송한다. 

4. UDP Echo server/client 
connect(), listen() 단계가 생략된다. 
TCP 의 경우 active socket 의 갯수를 파악 가능하지만, UDP 의 경우 message based, connection-less  이기 때문에 클라이언트의 소켓 정보를 가지고 있지 않다. 따라서 클라이언트들이 직접 자신들이 연결했다는것을 알려주는것이 일반적이다. 
#REG or #DEREG 기능 구현 


You get remote address information with every incoming UDP datagram, so you konw who it's from, so you don'y need a per-connection socket to tell you. 
You must explicitly give  client address to sendto function since there's no socket connection to client.

5. Zero Message Queue 
Request-Reply pattern 
Socket 프로그래밍에서 사용하던 것을 그대로 ZMQ 에서 사용하고자 한다면 이 Request-Reply pattern 을 사용하면 된다. 
클라이언트 측에서는 동기식으로 보인다. Request 를 주고, Reply 가 와야 다음 Request 를 보낼 수 있기 때문이다. 

제일먼저 Context() 를 호출하여 Context 객체를 생성해야한다. 이것은 ZMQ 를 위한 일종의 프로그램을 실행해주는것이라고 생각하면 된다. 

Socket programming 에서는 Socket 을 생성하는 절차가 가장 먼저 있지만, zmq 에서는 언어 자체에서는 제공하지 않는다. 
그리고 Context 객체로 socket 을 생성한다. 이 Socket 을 생성할때 어떠한 Pattern 인지를 알려줘야한다. Reply pattern 같은 경우는 다음과 같다. 

context = zmq.Context() 
socket = context.socket.(zmq.REP) #누군가에게 Request 를 받으면 Reply 를 주는 Pattern 이다. 
socket.bind("tcp://*:5555")
socket.recv() 
socket.send(b"world") 등을 사용,

클라이언트의 경우 
동일하게 Context 및 Socket 생성

context = zmq.Context()
socket = context.socket(zmq.REQ) #누군가에게 Request 를 보내는 Pattern 
socket.recv()
socket.send(b"hello"

1:N 이 되도록 해야한다면? 
아무것도 하지 않아도 된다. 앞서 만든 basic 코드를 수정하지 않아도 된다. 

Publish-Subscribe pattern
단순 Socket Programming 이나 Request-Reply 패턴과는 양상이 다른, enhance한 기능을 수행하는 패턴이다. 
어딘가에 구독하면 그 구독된 곳에서 Publish 해서 정보를 알려주는것이다. 
정보를 만들고 배포하는 자가 있고, 단체가 받는것이라 생각하면 된다. 일반적으로 알람 메시지 같은것을 생각해보면 된다.

접근을 당하는 애들이 bind 한다. 즉, 서버와 클라이언트라는 역할이 명확하게 구분되지 않는다. 

PUB-SUB Weather broadcating example 
Publisher pushes out weather updates.
Subscriber grabs anyting to do with a specified zip code.
즉, Subs 는 Publisher 가 Push 하는 정보 중에 원하는것만 가져올 수 있다. 

setsockopt_string(zmq.SUBSCRIBE, zip_filter)
#SUBSCRIBE 소켓을 열면서 소켓에 zip_filter 라는 필터 옵션을 주는것이다. option 에다가 String 으로다가 정보를 준다. 

PUB-SUB socket is unidirectional (한방향 통신)

PUB-SUB with Pipeline 
Pipeline : 동시다발적으로 여러개의 작업을 같이 실행, 그것들을 취합하여 하나의 결과를 가져오는것.
Divide - Conquer 형식이라 볼 수 있다. 

N:M 통신이라는 뜻의 fan-out/fan-in 패턴이다. 
PUSH/PULL 을 사용한다. Worker 들은 자기가 필요한 시간에 필요한 정보를 PULL  하여 작업을 수행함. 
Sink 에서는 WOrker 들로부터 정보를 받을떄 누구로부터 정보를 먼저 받을지 조절할 수있다. fair-queueing 와 같은 방식. 이는 코드를 통해 방식을 바꿀 수 있다. 
주로 병렬적으로 일을 처리, 한곳에 정보를 모으는 작업을 할때 사용되는 패턴이다. 
PUB/SUB with pipeline pattern 에서는 PUSH/PULL 기능이 등장한다.  

서버는 클라이언트들로부터 PULL 한 정보를 다시 클라이언트들에게 PUSH 한다.
하나의 프로세스, 애플리케이션등에는 여러개의 ZMQ 패턴을 가질 수 있다. 

if __name__ == '__main__': 은 인터프리터에게 주어진 최초의 파이썬 소스코드인가를 검사하는 구문이다.  즉, 메인 코드인지를 검사하는 구문이다. 
두개 이상의 소스코드를 만들어서 모듈화 할떄 이 구문을 사용하면 된다. 

클라이언트들은 살았다 죽었다하면서 자신의 정보를 PUSH 할것이므로, 서버측의 PULL socket 에서 bind을 수행해야한다. 
collector.bind("tcp://*:5558")

pull socket 의 recv한 정보를 pub socket 을 통해 send한다. 
이것은 하나의 Relay 서버라고 볼 수 있다. 
통신 프로그램에서는 데이터의 종류를 잘 신경써야한다. 

poll 은 수신버퍼에 데이터가 있어서 해당 데이터를 recv, 즉 읽어야 하나 말아야 하나 묻는것이다. 있으면 TRUE 를 반환한다.
zmq.POLLIN 함수와 subscriber.poll() 함수를 사용한다. 이때 subscriber 은 SUB socket 이다. 
수신버퍼에 뭐가 있다고 TRUE 가 반환되면 SUB socket.recv 을 사용하여 데이터를 읽어오고, 읽을 것이 없다면, PUSH socket.send 을 통해서 데이터를 전송한다.  
